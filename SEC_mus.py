import discord
from discord.ext import commands
from discord import app_commands as apc
import youtube_dl
from LIB_config import bot
from LIB_music import YTDLSource, Song, VoiceState
from LIB_music import YTDLError, DowloadError
import math

Embed = discord.Embed(
    title="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–º–±–µ–¥!",
    description="–°–æ–æ–±—â–µ–Ω–∏–µ!",
    color=0xAF69EF,
)

# Suppress noise about console usage from errors
youtube_dl.utils.bug_reports_message = lambda: ''

ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': False,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0' # bind to ipv4 since ipv6 addresses cause issues sometimes
}

ffmpeg_options = {
    'options': '-vn'
}


ytdl = youtube_dl.YoutubeDL(ytdl_format_options)

class music(apc.Group):
    def __init__(self, bot: commands.Bot):
        super().__init__()
        self.bot = bot
        self.voice_states = {}
        self.voice_state = {}

    def get_voice_state(self, ctx: commands.Context):
        #state = self.voice_states.get(ctx.guild.id)
        state = VoiceState(self.bot, ctx)
        self.voice_states[ctx.guild.id] = state

        return state

    def cog_unload(self):
        for state in self.voice_states.values():
            self.bot.loop.create_task(state.stop())

    def cog_check(self, ctx: commands.Context):
        if not ctx.guild:
            raise commands.NoPrivateMessage('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –õ–° (–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)')

        return True

    async def cog_before_invoke(self, ctx: commands.Context):
        self.voice_state = self.get_voice_state(ctx)

    async def cog_command_error(self, ctx: commands.Context, error: commands.CommandError):
        await ctx.send('–ú–µ–Ω—è —ç—Ç–æ –ø—É–≥–∞–µ—Ç. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞: {}'.format(str(error)))
        

    @apc.command(name="–ø–æ–¥–∫–ª—é—á–∏—Ç—å")
    async def join(self, interaction: discord.Interaction, channel: discord.VoiceChannel = None):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É"""
        Embed.title = "–ú—É–∑—ã–∫–∞"
        
        if channel == None and interaction.user.voice.channel != None:
            channel = interaction.user.voice.channel
        if str(self.bot.voice_clients) != "[]":
            await self.bot.voice_clients[0].disconnect()
        if interaction.user.voice != None:
            await channel.connect()
            Embed.description=f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: <#{channel.id}>"

        if interaction.user.voice.channel == None:
            Embed.description="–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É!"
        await interaction.response.send_message(embed=Embed)
        
    @apc.command(name="–æ—Ç–∫–ª—é—á–∏—Ç—å")
    async def disconnect(self, interaction: discord.Interaction):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        Embed.title = "–ú—É–∑—ã–∫–∞"
        if str(self.bot.voice_clients) != "[]":
            Embed.description = f"–í—ã—Ö–æ–¥ –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –∏–∑:\n<#{self.bot.voice_clients[0].channel.id}>"
            self.voice_state.songs.clear()
            await self.voice_state.stop()
        else:
            Embed.description = "–í—ã—Ö–æ–¥–∏—Ç—å –Ω–µ–æ—Ç–∫—É–¥–∞"
        await interaction.response.send_message(embed=Embed)

    @apc.command(name="–ø–ª–µ–π")
    async def play(self, interaction: discord.Interaction, *, url: str):
        """–ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ: –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –Æ—Ç—É–± –∏ –°–∞—É–Ω–¥–∫–ª–∞—É–¥ (–Ω–∞ —Å—á—ë—Ç –¥—Ä—É–≥–∏—Ö –æ—á–µ–Ω—å —Å–æ–º–Ω–µ–≤–∞—é—Å—å —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)"""
        ctx = await commands.Context.from_interaction(interaction)
        await interaction.response.defer()
        if not ctx.voice_client:
            await ctx.author.voice.channel.connect()
            
        try:
            source = await YTDLSource.create_source(ctx, url, loop=self.bot.loop)
            url = source.url
            Embed.description = '–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {}\n'.format(str(source))
            Embed.title = "–ú—É–∑—ã–∫–∞"
        except YTDLError as e:
            Embed.description = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {}'.format(str(e))
        except DowloadError as e:
            Embed.description = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {}'.format(str(e))
        else:
            song = Song(source)
            await self.cog_before_invoke(ctx)
            self.voice_state.voice = bot.voice_clients[0]
            await self.voice_state.songs.put(song)
        await interaction.followup.send(embed=Embed)
            
    @apc.command(name="–≥—Ä–æ–º–∫–æ—Å—Ç—å")
    async def volume(self, interaction: discord.Interaction, volume: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏"""
        Embed.title = "–ú—É–∑—ã–∫–∞"

        if self.bot.voice_clients[0].is_playing() == False:
            Embed.description = "–ë–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!"
            return await interaction.response.send_message(embed=Embed)

        self.bot.voice_clients[0].source.volume = volume / 100
        Embed.description = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å —Ä–∞–≤–Ω–∞ {}%".format(volume)
        await interaction.response.send_message(embed=Embed)

    @apc.command(name="—Å—Ç–æ–ø")
    async def stop(self, interaction: discord.Interaction):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏"""
        Embed.title = "–ú—É–∑—ã–∫–∞"
        
        self.voice_state.songs.clear()
        self.voice_state.voice.stop()
        Embed.description = "–°—Ç–æ–ø! ‚èπÔ∏è"
        
        await interaction.response.send_message(embed=Embed)
        
    @apc.command(name="–ø–∞—É–∑–∞")
    async def pause(self, interaction: discord.Interaction):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏"""
        Embed.title = "–ú—É–∑—ã–∫–∞"
        
        self.voice_state.voice.pause()
        Embed.description = "–ü–∞—É–∑–∞! ‚è∏Ô∏è"
        
        await interaction.response.send_message(embed=Embed)
        
    @apc.command(name="–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    async def resume(self, interaction: discord.Interaction):
        """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏"""
        Embed.title = "–ú—É–∑—ã–∫–∞"
        
        self.voice_state.voice.resume()
        Embed.description = "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! ‚ñ∂Ô∏è"
        
        await interaction.response.send_message(embed=Embed)
        
    @apc.command(name="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    async def skip(self, interaction: discord.Interaction):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫"""
        Embed.title = "–ú—É–∑—ã–∫–∞"
        
        self.voice_state.skip()
        Embed.description = "–ü—Ä–æ–ø—É—Å–∫! ‚è©"
        
        await interaction.response.send_message(embed=Embed)
        
    @apc.command(name="–ø–µ—Ä–µ–º–µ—à–∫–∞")
    async def snuffle(self, interaction: discord.Interaction):
        """–ü–µ—Ä–µ–º–µ—à–∞—Ç—å —Ç—Ä–µ–∫–∏"""
        Embed.title = "–ú—É–∑—ã–∫–∞"
        
        self.voice_state.songs.shuffle()
        Embed.description = "–ü–µ—Ä–µ–º–µ—à–∫–∞! üîÄ"
        
        await interaction.response.send_message(embed=Embed)
        
    @apc.command(name="—Ü–∏–∫–ª")
    async def loop(self, interaction: discord.Interaction):
        """–ó–∞—Ü–∏–∫–ª–∏—Ç—å –æ–¥–∏–Ω —Ç—Ä–µ–∫"""
        Embed.title = "–ú—É–∑—ã–∫–∞"
        
        self.voice_state.loop = not self.voice_state.loop
        if self.voice_state.loop == True:
            Embed.description = f"–ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º! üîÅ"
        else:
            Embed.description = f"–¶–∏–∫–ª –≤—ã–∫–ª—é—á–µ–Ω! ‚ñ∂Ô∏è"
        
        await interaction.response.send_message(embed=Embed)
        
    @apc.command(name="—Å–ø–∏—Å–æ–∫")
    async def queue(self, interaction: discord.Interaction, page: int = 1):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"""
        Embed.title = "–ú—É–∑—ã–∫–∞"
        if len(self.voice_state.songs) == 0:
            Embed.description = '–í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.'
            return await interaction.response.send_message(embed=Embed)

        items_per_page = 10
        pages = math.ceil(len(self.voice_state.songs) / items_per_page)

        start = (page - 1) * items_per_page
        end = start + items_per_page

        queue = ''
        for i, song in enumerate(self.voice_state.songs[start:end], start=start):
            queue += '`{0}.` [**{1.source.title}**]({1.source.url})\n'.format(i + 1, song)

        Embed.description=('**{} tracks:**\n\n{}'.format(len(self.voice_state.songs), queue))
        Embed.set_footer(text='Viewing page {}/{}'.format(page, pages))
        await interaction.response.send_message(embed=Embed)
        
        
        
        


    #@apc.command()
    #async def play(self, interaction: discord.Interaction, query: str):
    #    """–ò–≥—Ä–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    #    
    #    source = discord.PCMVolumeTransformer(discord.FFmpegPCMAudio(query))
    #    self.bot.voice_clients[0].play(source=source, after=lambda e: print('Player error: %s' % e) if e else None)
    #    Embed.title = "–ú—É–∑—ã–∫–∞"
    #    Embed.description = 'Now playing: {}'.format(query)
    #    await interaction.response.send_message(embed=Embed)

#    @play.before_invoke
#    @yt.before_invoke
#    @stream.before_invoke
#    async def ensure_voice(self, ctx):
#        if ctx.voice_client is None:
#            if ctx.author.voice:
#                await ctx.author.voice.channel.connect()
#            else:
#                await ctx.send("You are not connected to a voice channel.")
#                raise apc.CommandError("Author not connected to a voice channel.")
#        elif ctx.voice_client.is_playing():
#            ctx.voice_client.stop()
#
#def setup(client):
#    client.add_cog(Music(client))
#    print('Music: activated')